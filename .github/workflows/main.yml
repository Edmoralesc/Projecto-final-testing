name: React CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop , vite_migration]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  
  codeql:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./api  # path to your Python API
    steps:
      - uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          upload: true        # Upload results to GitHub Security tab
          output: results.sarif  # Save SARIF locally

      - name: Fail if CodeQL finds issues
        run: |
          if grep -q '"severity":' results.sarif; then
            echo "CodeQL detected issues. Failing the job."
            exit 1
          else
            echo "No issues found."
          fi

  backend-api:
    runs-on: ubuntu-latest
    needs:
      - sca
      - codeql
    defaults:
      run:
        working-directory: ./api  # path to your Python API
    steps:
      #checkou code
      - name: Checkout code
        uses: actions/checkout@v4

      #prepare python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest --maxfail=1 --disable-warnings -q 

      #automated script to harden image 
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: ./api/Dockerfile


      #create docker image

      - name: Build Docker image
        run: docker build -t emoralesc/api:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image to Docker Hub
        if: github.ref == 'refs/heads/main'
        run: docker push  emoralesc/api:latest


  frontend-react:    
    runs-on: ubuntu-latest
    needs:
      - sca
      - codeql
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Vitest
        run: npm install --save-dev vitest@^4.0.3 @testing-library/react @testing-library/jest-dom jsdom
        working-directory: ./frontend

      - name: Install optional Vitest coverage
        run: npm install --save-dev @vitest/coverage-v8@^4.0.3
        working-directory: ./frontend


      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --coverage 

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        continue-on-error: true

      #automated script to harden image 
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: ./frontend/Dockerfile

      - name: Build Docker image
        run: docker build -t emoralesc/frontend:latest -f frontend/Dockerfile frontend/

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image to Docker Hub
        if: github.ref == 'refs/heads/main'
        run: docker push  emoralesc/frontend:latest

      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}


  sca:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: pip install -r requirements.txt
        working-directory: ./api

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk test
        run: snyk test --file=./requirements.txt
        working-directory: ./api
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}


      ### start node testing
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run Snyk test node
        uses: snyk/actions/node@master
        with:
          command: test
          args: ./frontend
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

          