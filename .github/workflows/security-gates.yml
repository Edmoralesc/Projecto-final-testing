name: Security Gates

on:
  workflow_dispatch:
  pull_request:
  push:
    branches-ignore: ["main"]

concurrency:
  group: security-gates-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: fastticket-eks
  NAMESPACE: staging
  BACKEND_IMAGE: docker.io/fercanap/fastticket-backend:staging
  FRONTEND_IMAGE: docker.io/fercanap/fastticket-frontend:staging
  DAST_TARGET_URL: http://127.0.0.1:8080
  DAST_HEALTH_PATH: /health
  GATE_MAX_CRITICAL: '0'
  GATE_MAX_HIGH: '0'

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Python SCA (pip-audit)
        working-directory: api
        run: |
          pip install -U pip pip-audit
          pip-audit -r requirements.txt -f json -o ../reports/pip-audit.json || true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Node SCA (npm audit)
        working-directory: frontend
        run: |
          npm ci
          npm audit --audit-level=high --json > ../reports/npm-audit.json || true

      - name: Upload SCA reports
        uses: actions/upload-artifact@v4
        with:
          name: sca-reports
          path: reports/
          retention-days: 7

  sast:
    uses: ./.github/workflows/codeql.yml

  container-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Trivy scan backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}
          format: 'json'
          output: 'reports/trivy-backend.json'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true

      - name: Trivy scan frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}
          format: 'json'
          output: 'reports/trivy-frontend.json'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true

      - name: Upload container scan reports
        uses: actions/upload-artifact@v4
        with:
          name: container-reports
          path: reports/
          retention-days: 7

  iac-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          format: sarif
          sarif_file: reports/tfsec.sarif
          additional_args: --force-all-dirs

      - name: Install checkov
        run: |
          python -m pip install --upgrade pip
          pip install checkov

      - name: Run checkov
        run: |
          mkdir -p reports
          checkov -d infra -o json --output-file-path reports/checkov.json || true
          checkov -d infra -o sarif --output-file-path reports/checkov.sarif || true

      - name: Upload IaC reports
        uses: actions/upload-artifact@v4
        with:
          name: iac-reports
          path: reports/
          retention-days: 7

  dast:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "$AWS_REGION"

      - name: Port-forward backend for DAST
        run: |
          nohup bash -c 'kubectl -n "$NAMESPACE" port-forward deploy/backend 8080:8000 >/tmp/pf.log 2>&1' &
          sleep 5
          curl -sS -o /dev/null -w "%{http_code}\n" "${{ env.DAST_TARGET_URL }}${{ env.DAST_HEALTH_PATH }}" || true

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: ${{ env.DAST_TARGET_URL }}
          rules_file_name: .zap/rules.tsv
          cmd_options: '-a -m 5'
          fail_action: false

      - name: Collect ZAP artifacts
        run: |
          mkdir -p reports/zap
          # The action uploads its own artifacts; we also copy local if present
          if [ -f report_html.html ]; then mv report_html.html reports/zap/zap.html; fi || true

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: reports/zap
          retention-days: 7

  gates:
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, iac-scan, dast]
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-reports'
          path: reports
          merge-multiple: true

      - name: Evaluate gates
        shell: bash
        run: |
          set -euo pipefail
          crit_max=${GATE_MAX_CRITICAL}
          high_max=${GATE_MAX_HIGH}
          echo "Thresholds: CRITICAL<=${crit_max}, HIGH<=${high_max}"
          to_int(){ awk '{print ($1+0)}'; }
          # helpers
          count_trivy(){ jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' "$1" 2>/dev/null | to_int; }
          count_trivy_high(){ jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' "$1" 2>/dev/null | to_int; }
          count_npm(){ jq 'if .metadata and .metadata.vulnerabilities then .metadata.vulnerabilities.critical // 0 else 0 end' "$1" 2>/dev/null | to_int; }
          count_npm_high(){ jq 'if .metadata and .metadata.vulnerabilities then .metadata.vulnerabilities.high // 0 else 0 end' "$1" 2>/dev/null | to_int; }
          count_pip(){ jq '[ .[] | select((.severity // "") | test("CRITICAL|HIGH"; "i")) ] | length' "$1" 2>/dev/null | to_int; }
          # IaC (checkov)
          count_checkov_crit(){ jq '[.results.failed_checks[]? | select((.severity // "") == "CRITICAL")] | length' "$1" 2>/dev/null | to_int; }
          count_checkov_high(){ jq '[.results.failed_checks[]? | select((.severity // "") == "HIGH")] | length' "$1" 2>/dev/null | to_int; }

          mkdir -p reports/summary
          summary="reports/summary/gates-summary.txt"

          # Container
          bc_c=$(count_trivy reports/trivy-backend.json); bc_h=$(count_trivy_high reports/trivy-backend.json)
          fc_c=$(count_trivy reports/trivy-frontend.json); fc_h=$(count_trivy_high reports/trivy-frontend.json)

          # SCA
          npm_c=$(count_npm reports/npm-audit.json); npm_h=$(count_npm_high reports/npm-audit.json)
          pip_h=$(count_pip reports/pip-audit.json); pip_c=0 # pip-audit may not always map CRITICAL

          # IaC
          ck_c=$(count_checkov_crit reports/checkov.json); ck_h=$(count_checkov_high reports/checkov.json)

          echo "Container - Backend: CRIT=${bc_c} HIGH=${bc_h}" | tee -a "$summary"
          echo "Container - Frontend: CRIT=${fc_c} HIGH=${fc_h}" | tee -a "$summary"
          echo "SCA - npm audit: CRIT=${npm_c} HIGH=${npm_h}" | tee -a "$summary"
          echo "SCA - pip-audit: HIGH=${pip_h}" | tee -a "$summary"
          echo "IaC - checkov: CRIT=${ck_c} HIGH=${ck_h}" | tee -a "$summary"

          fail=0
          cmp(){ [ "$1" -le "$2" ] || fail=1; }

          cmp "$bc_c" "$crit_max"; cmp "$bc_h" "$high_max"
          cmp "$fc_c" "$crit_max"; cmp "$fc_h" "$high_max"
          cmp "$npm_c" "$crit_max"; cmp "$npm_h" "$high_max"
          cmp "$pip_c" "$crit_max"; cmp "$pip_h" "$high_max"
          cmp "$ck_c" "$crit_max"; cmp "$ck_h" "$high_max"

          echo
          if [ "$fail" -ne 0 ]; then
            echo "GATES: FAIL" | tee -a "$summary"
            exit 1
          else
            echo "GATES: PASS" | tee -a "$summary"
          fi

      - name: Upload summary
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: security-gates-summary
          path: reports/summary/
          retention-days: 7
